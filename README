Welcome to the Janrain Engage library for the Android platform.  This library is available open-source under a Berkeley 
license, as found in the LICENSE file.  This is an alpha release, do not go live with it.  

Getting Started
You will need git, the Android SDK with API level 7 (Android 2.1).  You can optionally use IntelliJ with the 
repo-supplied IDE configuration files.
git clone https://github.com/janrain/engage.android.git

Compiling SimpleDemo with IntelliJ:
Start IntelliJ, select Open a Project, browser to the engage.android directory and click the Choose button.
You will need to configure IntelliJ for your installation of the Android SDK: Select the JREngage Module from the 
project tree, right click -> Open Module Settings, select the Android facet of JREngage (you may need to expand the 
turndown in the list of modules), select New to configure a new "Android Platform", browse to the "android-7" directory 
found in your Android SDK directory, click OK, select the Android facet of the SimpleDemo module, click Refresh, select 
the Android 2.1 Platform from the drop down. If you do not have IntelliJ configured with JDK 1.6 then select Project 
from the leftmost Project Settings list, you will see "1.6 Invalid" in the drop down, click the New button, choose JSDK, 
then browse to your installation of the 1.6 JDK (on a Mac find it under 
System/Library/Java/JavaVirtualMachines/1.6.0jdk/Contents.  When you configure the the IntelliJ to use the Android 2.1 
platform it may have named the "Android Platform" "Android 2.1-update1 Platform" instead of "Android 2.1 Platform" in 
which case you will need to (for both the JREngage module and the SimpleDemo module) go to the Dependencies tab, remove 
the "Android 2.1 Platform" dependency, click Add, choose Library, and select the "Android 2.1-update1 Platform" library. 
Navigate to the MainActivity.java file in the SimpleDemo module (under SimpleDemo/src/com/janrain/android/simpledemo) 
via the Project pane, double click it to open it.  IntelliJs source code highlighting will show compile errors for 
references to R.java, this is normal (you can rebuild R.java by right clicking and selecting Force Regenerate R.java 
file.) The SimpleDemo module should now compile and run.  Press shift+F10 to run, then select your Android device.

Compiling SimpleDemo with ant:
cd engage.android/SimpleDemo
android update project -p .
ant compile
(To install, ant install. adb must be running and an Android device must be available.)

Adding the JREngage library to an Existing IntelliJ Project:

In the project pane, right click a module select "Open Module Settings".
Under "Project Settings", click "Modules"
Add a module by clicking the "+" box just to the right of the Project Settings view
Select "New" -> "Module"
Select "Import existing module"
Click the file chooser button ("...") then browse to the JREngage.iml file found under 
    engage.android/JREngage/JREngage.iml, then click "Finish"
In the Modules window (to the right of the project settings window), expand the "JREngage" module folder (don't worry if 
    it's underlined and red; this error will go away after you hit "ok")
Click the "Android" module below the "JREngage" folder.
Set the "Android Platform" to Android 2.1 Platform.
Make sure "Is Library Project" is selected.
In the Modules window (to the right of the project settings window), select your app's module
Click the "Dependencies" tab
To the right of the listed Dependencies, click the "Add..." button
Select "Module Dependency" from the drop down menu
Select JREngage from the modal window, click OK, then make sure the dependency "Scope" is set to "Compile"
Under "Project Settings", click "Libraries"
Add a library by clicking the "+" box just to the right of the Project Settings view
In the "Choose modules" dialog, where it says "Library 'Unnamed' will be added to the selected modules, click /cancel/ 
    (The library dependency already exists in the JREngage module, the library just needs to be defined for this 
    IntelliJ project, so we don't need to add a duplicate dependency to the JREngage module.)
Change the name to "jackson"
Select "Attach Classes"
Navigate to engage.android/JREngage/libs, and select both the jackson-core-lgpl-1.6.4.jar and 
    jackson-mapper-lgpl-1.6.4.jar files
Click OK
From JREngage/AndroidManifest.xml, copy the following elements into your project's AndroidManifest.XML: uses-permission, 
    uses-sdk, activity (x4)

Interfacing With the Library:

The library exposes a public class, com.janrain.android.engage.JREngage, through which calling applications can 
    interact.  Interaction begins by calling the JREngage.initInstance(Context context, String appId, String tokenUrl, 
    JREngageDelegate delegate) method.  
- The context is your application's Android Context (retrievable with Activity.getApplicationContext(), 
- the appId is the application ID of your Janrain Engage application (from rpxnow.com), 
- the tokenUrl (optional) is the token URL that authentication from your application will post to,
- the delegate is an interface you must implement which serves to receive responses and information from the library. 
    (See SimpleDemo's delegate implementation for a good idea where to start.)

Once initialized user interaction with the JREngage library can be started by calling 
    JREngage.showAuthenticationDialog() or JREngage.showSocialPublishingDialogWithActivity(JRActivity activity).  
    Successful authentications will invoke the delegate.jrAuthenticationDidSucceedForUser(JRDictionary auth_info, String 
    provider).

Common Use Cases:

Using JREngage to authenticate a user for the use of your internet based service -- 
- initialize the library with a token URL hosted on your service's web server
- have the web page served at the token URL create a session with your service and put a session token in the response
- implement the jrAuthenticationDidReachTokenUrl delegate method, pulling the session token out of the tokenUrlPayload 
    parameter
- invoke your internet services features with that session token

Using JREngage to enable a user to easily share news from your Android app --
- initialize the library
- instantiate and (optionally) populate the fields of a JRActivity object
- call JREngage.showSocialPublishingDialogWithActivity

What's Coming:

-Better support for device orientation change
-Better support for task resumption after a process kill
-UI tweaks
-Email and SMS support


Reporting Bugs and asking questions:

Please report bugs via the forum, or via github issues.
A Q&A forum has been set up for this alpha release at 
https://support.janrain.com/forums/315745-android-library-open-alpha-q-a